package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import edu.ndsu.cs.estimate.cayenne.persistent.TaskInReport;
import edu.ndsu.cs.estimate.cayenne.persistent.User;

/**
 * Class _Report was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Report extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String REPORT_ID_PK_COLUMN = "ReportID";

    public static final Property<LocalDateTime> DATE_GENERATED = Property.create("dateGenerated", LocalDateTime.class);
    public static final Property<Double> PREDICTION_MULTIPLIER = Property.create("predictionMultiplier", Double.class);
    public static final Property<List<TaskInReport>> TASKS_IN_REPORT = Property.create("tasksInReport", List.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected LocalDateTime dateGenerated;
    protected double predictionMultiplier;

    protected Object tasksInReport;
    protected Object user;

    public void setDateGenerated(LocalDateTime dateGenerated) {
        beforePropertyWrite("dateGenerated", this.dateGenerated, dateGenerated);
        this.dateGenerated = dateGenerated;
    }

    public LocalDateTime getDateGenerated() {
        beforePropertyRead("dateGenerated");
        return this.dateGenerated;
    }

    public void setPredictionMultiplier(double predictionMultiplier) {
        beforePropertyWrite("predictionMultiplier", this.predictionMultiplier, predictionMultiplier);
        this.predictionMultiplier = predictionMultiplier;
    }

    public double getPredictionMultiplier() {
        beforePropertyRead("predictionMultiplier");
        return this.predictionMultiplier;
    }

    public void addToTasksInReport(TaskInReport obj) {
        addToManyTarget("tasksInReport", obj, true);
    }

    public void removeFromTasksInReport(TaskInReport obj) {
        removeToManyTarget("tasksInReport", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<TaskInReport> getTasksInReport() {
        return (List<TaskInReport>)readProperty("tasksInReport");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateGenerated":
                return this.dateGenerated;
            case "predictionMultiplier":
                return this.predictionMultiplier;
            case "tasksInReport":
                return this.tasksInReport;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateGenerated":
                this.dateGenerated = (LocalDateTime)val;
                break;
            case "predictionMultiplier":
                this.predictionMultiplier = val == null ? 0 : (double)val;
                break;
            case "tasksInReport":
                this.tasksInReport = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateGenerated);
        out.writeDouble(this.predictionMultiplier);
        out.writeObject(this.tasksInReport);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateGenerated = (LocalDateTime)in.readObject();
        this.predictionMultiplier = in.readDouble();
        this.tasksInReport = in.readObject();
        this.user = in.readObject();
    }

}
