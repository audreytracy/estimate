package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import edu.ndsu.cs.estimate.cayenne.persistent.Report;
import edu.ndsu.cs.estimate.cayenne.persistent.Task;

/**
 * Class _TaskInReport was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _TaskInReport extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PK_PK_COLUMN = "PK";

    public static final Property<Report> REPORT = Property.create("report", Report.class);
    public static final Property<Task> TASK_IN_REPORT = Property.create("taskInReport", Task.class);


    protected Object report;
    protected Object taskInReport;

    public void setReport(Report report) {
        setToOneTarget("report", report, true);
    }

    public Report getReport() {
        return (Report)readProperty("report");
    }

    public void setTaskInReport(Task taskInReport) {
        setToOneTarget("taskInReport", taskInReport, true);
    }

    public Task getTaskInReport() {
        return (Task)readProperty("taskInReport");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "report":
                return this.report;
            case "taskInReport":
                return this.taskInReport;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "report":
                this.report = val;
                break;
            case "taskInReport":
                this.taskInReport = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.report);
        out.writeObject(this.taskInReport);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.report = in.readObject();
        this.taskInReport = in.readObject();
    }

}
