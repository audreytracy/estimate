package edu.ndsu.cs.estimate.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import edu.ndsu.cs.estimate.cayenne.persistent.TaskHourLog;
import edu.ndsu.cs.estimate.cayenne.persistent.TaskInReport;
import edu.ndsu.cs.estimate.cayenne.persistent.User;

/**
 * Class _Task was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Task extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String TASK_ID_PK_COLUMN = "TaskId";

    public static final Property<LocalDateTime> ACTUAL_END_DATE = Property.create("actualEndDate", LocalDateTime.class);
    public static final Property<Boolean> COMPLETED = Property.create("completed", Boolean.class);
    public static final Property<Boolean> DROPPED = Property.create("dropped", Boolean.class);
    public static final Property<LocalDateTime> EST_END_DATE = Property.create("estEndDate", LocalDateTime.class);
    public static final Property<Integer> ESTIMATED_HOURS = Property.create("estimatedHours", Integer.class);
    public static final Property<String> NAME = Property.create("name", String.class);
    public static final Property<LocalDateTime> START_DATE = Property.create("startDate", LocalDateTime.class);
    public static final Property<Integer> SYSTEM_ESTIMATE = Property.create("systemEstimate", Integer.class);
    public static final Property<Integer> TIME_TAKEN = Property.create("timeTaken", Integer.class);
    public static final Property<LocalDateTime> TIMESTAMP_CREATED = Property.create("timestampCreated", LocalDateTime.class);
    public static final Property<List<TaskHourLog>> HOURS = Property.create("hours", List.class);
    public static final Property<List<TaskInReport>> REPORT_TASK = Property.create("reportTask", List.class);
    public static final Property<User> USER = Property.create("user", User.class);

    protected LocalDateTime actualEndDate;
    protected boolean completed;
    protected boolean dropped;
    protected LocalDateTime estEndDate;
    protected Integer estimatedHours;
    protected String name;
    protected LocalDateTime startDate;
    protected Integer systemEstimate;
    protected Integer timeTaken;
    protected LocalDateTime timestampCreated;

    protected Object hours;
    protected Object reportTask;
    protected Object user;

    public void setActualEndDate(LocalDateTime actualEndDate) {
        beforePropertyWrite("actualEndDate", this.actualEndDate, actualEndDate);
        this.actualEndDate = actualEndDate;
    }

    public LocalDateTime getActualEndDate() {
        beforePropertyRead("actualEndDate");
        return this.actualEndDate;
    }

    public void setCompleted(boolean completed) {
        beforePropertyWrite("completed", this.completed, completed);
        this.completed = completed;
    }

	public boolean isCompleted() {
        beforePropertyRead("completed");
        return this.completed;
    }

    public void setDropped(boolean dropped) {
        beforePropertyWrite("dropped", this.dropped, dropped);
        this.dropped = dropped;
    }

	public boolean isDropped() {
        beforePropertyRead("dropped");
        return this.dropped;
    }

    public void setEstEndDate(LocalDateTime estEndDate) {
        beforePropertyWrite("estEndDate", this.estEndDate, estEndDate);
        this.estEndDate = estEndDate;
    }

    public LocalDateTime getEstEndDate() {
        beforePropertyRead("estEndDate");
        return this.estEndDate;
    }

    public void setEstimatedHours(Integer estimatedHours) {
        beforePropertyWrite("estimatedHours", this.estimatedHours, estimatedHours);
        this.estimatedHours = estimatedHours;
    }

    public Integer getEstimatedHours() {
        beforePropertyRead("estimatedHours");
        return this.estimatedHours;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void setStartDate(LocalDateTime startDate) {
        beforePropertyWrite("startDate", this.startDate, startDate);
        this.startDate = startDate;
    }

    public LocalDateTime getStartDate() {
        beforePropertyRead("startDate");
        return this.startDate;
    }

    public void setSystemEstimate(Integer systemEstimate) {
        beforePropertyWrite("systemEstimate", this.systemEstimate, systemEstimate);
        this.systemEstimate = systemEstimate;
    }

    public Integer getSystemEstimate() {
        beforePropertyRead("systemEstimate");
        return this.systemEstimate;
    }

    public void setTimeTaken(Integer timeTaken) {
        beforePropertyWrite("timeTaken", this.timeTaken, timeTaken);
        this.timeTaken = timeTaken;
    }

    public Integer getTimeTaken() {
        beforePropertyRead("timeTaken");
        return this.timeTaken;
    }

    public void setTimestampCreated(LocalDateTime timestampCreated) {
        beforePropertyWrite("timestampCreated", this.timestampCreated, timestampCreated);
        this.timestampCreated = timestampCreated;
    }

    public LocalDateTime getTimestampCreated() {
        beforePropertyRead("timestampCreated");
        return this.timestampCreated;
    }

    public void addToHours(TaskHourLog obj) {
        addToManyTarget("hours", obj, true);
    }

    public void removeFromHours(TaskHourLog obj) {
        removeToManyTarget("hours", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<TaskHourLog> getHours() {
        return (List<TaskHourLog>)readProperty("hours");
    }

    public void addToReportTask(TaskInReport obj) {
        addToManyTarget("reportTask", obj, true);
    }

    public void removeFromReportTask(TaskInReport obj) {
        removeToManyTarget("reportTask", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<TaskInReport> getReportTask() {
        return (List<TaskInReport>)readProperty("reportTask");
    }

    public void setUser(User user) {
        setToOneTarget("user", user, true);
    }

    public User getUser() {
        return (User)readProperty("user");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "actualEndDate":
                return this.actualEndDate;
            case "completed":
                return this.completed;
            case "dropped":
                return this.dropped;
            case "estEndDate":
                return this.estEndDate;
            case "estimatedHours":
                return this.estimatedHours;
            case "name":
                return this.name;
            case "startDate":
                return this.startDate;
            case "systemEstimate":
                return this.systemEstimate;
            case "timeTaken":
                return this.timeTaken;
            case "timestampCreated":
                return this.timestampCreated;
            case "hours":
                return this.hours;
            case "reportTask":
                return this.reportTask;
            case "user":
                return this.user;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "actualEndDate":
                this.actualEndDate = (LocalDateTime)val;
                break;
            case "completed":
                this.completed = val == null ? false : (boolean)val;
                break;
            case "dropped":
                this.dropped = val == null ? false : (boolean)val;
                break;
            case "estEndDate":
                this.estEndDate = (LocalDateTime)val;
                break;
            case "estimatedHours":
                this.estimatedHours = (Integer)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "startDate":
                this.startDate = (LocalDateTime)val;
                break;
            case "systemEstimate":
                this.systemEstimate = (Integer)val;
                break;
            case "timeTaken":
                this.timeTaken = (Integer)val;
                break;
            case "timestampCreated":
                this.timestampCreated = (LocalDateTime)val;
                break;
            case "hours":
                this.hours = val;
                break;
            case "reportTask":
                this.reportTask = val;
                break;
            case "user":
                this.user = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.actualEndDate);
        out.writeBoolean(this.completed);
        out.writeBoolean(this.dropped);
        out.writeObject(this.estEndDate);
        out.writeObject(this.estimatedHours);
        out.writeObject(this.name);
        out.writeObject(this.startDate);
        out.writeObject(this.systemEstimate);
        out.writeObject(this.timeTaken);
        out.writeObject(this.timestampCreated);
        out.writeObject(this.hours);
        out.writeObject(this.reportTask);
        out.writeObject(this.user);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.actualEndDate = (LocalDateTime)in.readObject();
        this.completed = in.readBoolean();
        this.dropped = in.readBoolean();
        this.estEndDate = (LocalDateTime)in.readObject();
        this.estimatedHours = (Integer)in.readObject();
        this.name = (String)in.readObject();
        this.startDate = (LocalDateTime)in.readObject();
        this.systemEstimate = (Integer)in.readObject();
        this.timeTaken = (Integer)in.readObject();
        this.timestampCreated = (LocalDateTime)in.readObject();
        this.hours = in.readObject();
        this.reportTask = in.readObject();
        this.user = in.readObject();
    }

}
